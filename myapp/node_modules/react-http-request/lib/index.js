'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _superagent = require('superagent');

var _superagent2 = _interopRequireDefault(_superagent);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Request = function (_React$Component) {
  _inherits(Request, _React$Component);

  function Request() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, Request);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = Request.__proto__ || Object.getPrototypeOf(Request)).call.apply(_ref, [this].concat(args))), _this), _this.request = null, _this.state = {
      error: null,
      result: null,
      loading: true
    }, _this.willReceiveProps = function (nextProps) {
      if (JSON.stringify(_this.props) === JSON.stringify(nextProps)) {
        return;
      }

      _this.setState({
        error: null,
        result: null,
        loading: true
      });

      _this.request.abort();
      _this.performRequest(nextProps);
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(Request, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      this.performRequest(this.props);
    }
  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps() {
      this.willReceiveProps.apply(this, arguments);
    }
  }, {
    key: 'UNSAFE_componentWillReceiveProps',
    value: function UNSAFE_componentWillReceiveProps() {
      this.willReceiveProps.apply(this, arguments);
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      this.request.abort();
    }
  }, {
    key: 'performRequest',
    value: function performRequest(props) {
      var _this2 = this;

      var method = props.method;

      if (method === 'delete') {
        method = 'del';
      }

      this.request = _superagent2.default[method](props.url);

      if (props.headers) {
        this.request.set(props.headers);
      }

      if (props.withCredentials) {
        this.request.withCredentials();
      }

      if (props.buffer) {
        this.request.buffer();
      }

      var auth = props.auth;

      if (auth) {
        this.request.auth(auth.user, auth.pass);
      }
      if (props.fields) {
        for (var i = 0; i < props.fields.length; i++) {
          if (props.fields[i]) {
            this.request.field(props.fields[i].name, props.fields[i].value);
          }
        }
      }
      if (props.attach) {
        for (var _i = 0; _i < props.attach.length; _i++) {
          if (props.attach[_i]) {
            this.request.attach(props.attach[_i].name, props.attach[_i].path, props.attach[_i].filename);
          }
        }
      }

      var configs = ['type', 'accept', 'send', 'query', 'timeout', 'redirects'];
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = configs[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var _i2 = _step.value;

          if (props[_i2]) {
            this.request[_i2](props[_i2]);
          }
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return) {
            _iterator.return();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }

      if (props.onRequest) {
        this.request = props.onRequest(this.request);
      }

      this.request.then(function (result) {
        _this2.printLog(props, result);
        _this2.setState({
          error: null,
          result: result,
          loading: false
        });
      }).catch(function (error) {
        _this2.printLog(props, error);
        _this2.setState({
          error: error,
          result: null,
          loading: false
        });
      });
    }
  }, {
    key: 'printLog',
    value: function printLog(props, res) {
      if (props.verbose && res) {
        console.log(res); // eslint-disable-line no-console
      }
    }
  }, {
    key: 'render',
    value: function render() {
      return this.props.children(this.state);
    }
  }]);

  return Request;
}(_react2.default.Component);

Request.defaultProps = {
  method: 'get'
};
Request.propTypes = {
  children: _propTypes2.default.func,
  method: _propTypes2.default.string.isRequired,
  type: _propTypes2.default.string,
  accept: _propTypes2.default.string,
  url: _propTypes2.default.string.isRequired,
  timeout: _propTypes2.default.number,
  verbose: _propTypes2.default.bool,
  query: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.object]),
  send: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.object]),
  headers: _propTypes2.default.object,
  auth: _propTypes2.default.object,
  withCredentials: _propTypes2.default.bool,
  buffer: _propTypes2.default.bool,
  attach: _propTypes2.default.array,
  fields: _propTypes2.default.array,
  onRequest: _propTypes2.default.func
};
exports.default = Request;